@using Damas.Client.Datos
@code {
    List<Dama> damasNegras = new List<Dama>();
    List<Dama> damasBrancas = new List<Dama>();

    protected override void OnInitialized()
    {
        // enchemos o taboleiro de damas

        //neste bucle enchemos as 3 primeiras filas, as de arriba, fichas negras
        for (int i = 0; i < 3; i++)
        {
            //1. No bucle for comprobamos que a primeira casilla sexa multiplo de 2 ou non
            // segundo o valor de i. Por ex.se i e 0, a primeira fila, j non da 0
            //se j e 1 o resto de % 2 non e cero, enton sabemos que o valor desa celda non e par
            //cando pasa a seguinte fila, i e 1, e j pasa a ser 2 dividido entre 2 que da 0 de resto
            //co cal ahi debuxa e vai debuxando unha ficha de 2 en 2 casillas
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                damasNegras.Add(new Dama
                {
                    Color = "negra",
                    Columna = j,
                    Fila = i,
                    Direccion = DireccionDama.Abaixo
                });
            }
        }

        // con este bucle enchemos as filas da 5 a 8 con fichas blancas
        for (int i = 5; i < 8; i++)
        {
            for (int j = (i + 1) % 2; j < 8; j += 2)
            {
                damasBrancas.Add(new Dama
                {
                    Color = "blanca",
                    Columna = j,
                    Fila = i,
                    Direccion = DireccionDama.Arriba
                });
            }
        }

    }

    void MoverDama(int fila, int columna)
    {
        bool podeMoverseAqui = celdasPosibles.Contains((fila, columna));
        if (!podeMoverseAqui)
        {
            return;
        }

        if (Math.Abs(damaActiva.Columna - columna) == 2)
        {
            //confirmado que saltamos algunha ficha
            int columnaSaltada = (damaActiva.Columna + columna) / 2;
            int filaSaltada = (damaActiva.Fila + fila) / 2;

            var damaNegra = damasNegras.FirstOrDefault(
            d => d.Fila == filaSaltada && d.Columna == columnaSaltada);
            if (damaNegra != null)
            {
                damasNegras.Remove(damaNegra);
            }

            var damaBlanca = damasBrancas.FirstOrDefault(
            d => d.Fila == filaSaltada && d.Columna == columnaSaltada);
            if (damaBlanca != null)
            {
                damasBrancas.Remove(damaBlanca);
            }
        }

        damaActiva.Columna = columna;
        damaActiva.Fila = fila;

        if (damaActiva.Fila == 7 && damaActiva.Color == "negra")
        {
            damaActiva.Direccion = DireccionDama.Ambos;
        }

        if (damaActiva.Fila == 0 && damaActiva.Color == "blanca")
        {
            damaActiva.Direccion = DireccionDama.Ambos;
        }

        damaActiva = null;
        turnoBlancas = !turnoBlancas;
        EvaluarLugaresDama();
    }

    void EvaluarCasilla(int fila, int columna, bool primeiraVez = true)
    {
        var damaNegra = damasNegras.FirstOrDefault(d => d.Columna == columna && d.Fila == fila);
        var damaBlanca = damasBrancas.FirstOrDefault(d => d.Columna == columna && d.Fila == fila);

        if (damaNegra == null && damaBlanca == null)
        {
            celdasPosibles.Add((fila, columna));
        }
        else if (primeiraVez)
        {
            //comproba se podemos saltar unha das damas
            if ((turnoBlancas && damaNegra != null) || (!turnoBlancas && damaBlanca != null))
            {
                int diferenciaColumnas = columna - damaActiva.Columna;

                int diferenciaFilas = fila - damaActiva.Fila;

                EvaluarCasilla(fila + diferenciaFilas, columna + diferenciaColumnas, false);
            }

        }
    }

    Dama damaActiva = null;
    List<(int fila, int columna)> celdasPosibles = new(); //usamos un tuple

    bool turnoBlancas = true;

    void EvaluarLugaresDama()
    {
        //usamos Clear() dunha List porque se non o facemos
        //imos a ter moitisimas filas posibles por cada dama diferente que pulsemos
        //xa que as de damas anteriores non desaparecen da pantalla
        celdasPosibles.Clear();

        if (damaActiva != null)
        {
            List<int> filasPosibles = new List<int>();
            if (damaActiva.Direccion == DireccionDama.Abaixo || damaActiva.Direccion == DireccionDama.Ambos)
            {
                filasPosibles.Add(damaActiva.Fila + 1);
            }

            if (damaActiva.Direccion == DireccionDama.Arriba || damaActiva.Direccion == DireccionDama.Ambos)
            {
                filasPosibles.Add(damaActiva.Fila - 1);
            }

            foreach (var fila in filasPosibles)
            {
                EvaluarCasilla(fila, damaActiva.Columna - 1);
                EvaluarCasilla(fila, damaActiva.Columna + 1);
            }
        }
    }

    void FacerClickEnDama(Dama dama)
    {
        if (turnoBlancas && dama.Color == "negra")
        {
            return;
        }
        if (!turnoBlancas && dama.Color == "blanca")
        {
            return;
        }
        damaActiva = dama;
        EvaluarLugaresDama();
    }
}

@for (int i = 0; i < 8; i++)
{
    int iLocal = i;

    <div class="row">
        @for (int j = 0; j < 8; j++)
        {
            int jLocal = j;
            var dama = damasNegras.FirstOrDefault(n => n.Columna == j && n.Fila == i);

            if (dama == null)
            {
                dama = damasBrancas.FirstOrDefault(n => n.Columna == j && n.Fila == i);
            }

            bool podeMoverseAqui = celdasPosibles.Contains((i, j));

            <div @onclick="() => MoverDama(iLocal,jLocal)" class="cell @(podeMoverseAqui ? "activa" : "")">
                @if (dama != null)
                {
                    <div @onclick="() => FacerClickEnDama(dama)" class="dama @dama.Color @(dama == damaActiva? "activa": "")">
                        <span>@(dama.Direccion==DireccionDama.Ambos ? "R" : "")</span>
                    </div>
                }
            </div>
        }
    </div>
}